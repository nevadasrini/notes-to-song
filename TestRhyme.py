import datamuse
import re
import string

dm = datamuse.Datamuse() #create datamuse object


def getWords(wordList):
    '''
    Takes list of sentences (array of strings) as generated by the syllable function and returns
    a list of the last words of the sentence (array of strings)
    '''
    
    words = [] #create array to store last word of each sentence
    #loop through sentences in the list of strings
    for sentence in wordList:
        split = sentence.split(" ") #create an array of words in each sentence
        words.append(split[-1].translate(str.maketrans('', '', string.punctuation))) #append the last word of each sentence, stripped of punctuation
    return words #return an array of last words

def replaceRhyme(rhymes, wordList):
    song = []
    i = 0
    for sentence in wordList:
        split = sentence.split(" ")
        try:
            split[-1] = rhymes[i]
            i+=1
            song.append(" ".join(split))
        except:
            song.append(sentence)
    return song

def rhymeaabb(words, wordList):
    rhymes = [] #create list that will be populating with strings of rhyming words
    i = 0
    while (i<len(words)-1):
        #all possible test cases
        compare_word1 = dm.words(rel_rhy=words[i], rel_syn=words[i+1]) #create array of words that rhyme with word1 and are synonymous with word2
        compare_word2 = dm.words(rel_rhy=words[i+1], rel_syn=words[i]) #create array of words that rhyme with word2 and are synonymous with word1
        compare_word3 = dm.words(rel_nry=words[i], rel_syn=words[i+1]) #create array of words that nearly rhyme with word1 and are synonymous with word2
        compare_word4 = dm.words(rel_nry=words[i+1], rel_syn=words[i]) #create array of words that nearly rhyme with word2 and are synonymous with word1
        compare_word5 = dm.words(rel_rhy=words[i], ml=words[i+1]) #create array of words that rhyme with word1 and mean like word2
        compare_word6 = dm.words(rel_rhy=words[i+1], ml=words[i]) #create array of words that rhyme with word2 and mean like word1
        compare_word7 = dm.words(rel_nry=words[i], ml=words[i+1]) #create array of words that nearly rhyme with word1 and mean like word2
        compare_word8 = dm.words(rel_nry=words[i+1], ml=words[i]) #create array of words that nearly rhyme with word2 and mean like word1
        
        #cycle through each possible case, adding the best match to the list of rhymes. if no rhymes are found, return nothing
        if compare_word1!=[]:
            print("Found 1")
            rhymes.append(words[i])
            rhymes.append(compare_word1[0].get('word'))
        elif compare_word2!=[]:
            print("Found 2")
            rhymes.append(compare_word2[0].get('word'))
            rhymes.append(words[i+1])
        elif compare_word3!=[]:
            print("Found 3")
            rhymes.append(words[i])
            rhymes.append(compare_word3[0].get('word'))
        elif compare_word4!=[]:
            print("Found 4")
            rhymes.append(compare_word4[0].get('word'))
            rhymes.append(words[i+1])
        elif compare_word5!=[]:
            print("Found 5")
            rhymes.append(words[i])
            rhymes.append(compare_word5[0].get('word'))
        elif compare_word6!=[]:
            print("Found 6")
            rhymes.append(compare_word6[0].get('word'))
            rhymes.append(words[i+1])
        elif compare_word7!=[]:
            print("Found 7")
            rhymes.append(words[i])
            rhymes.append(compare_word7[0].get('word'))
        elif compare_word8!=[]:
            print("Found 8")
            rhymes.append(compare_word8[0].get('word'))
            rhymes.append(words[i+1])
        else:
            print("Found nothing :(")
            rhymes.append(words[i])
            rhymes.append(words[i+1])
        i+=2
    
    return replaceRhyme(rhymes, wordList)

# def rhymeabab(words, wordList):
#     rhymes = [] #create list that will be populating with strings of rhyming words
#     i = 0
#     while (i<len(words)-1):
#         break

